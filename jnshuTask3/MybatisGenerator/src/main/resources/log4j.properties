log4j.rootLogger=info,stdout,D,E
#定义stdout是控制台输出类型
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
#使用system.out输出
log4j.appender.stdout.Target=System.out
#定义输出端stdout的布局为灵活布局
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
#定义输出的格式，2019-04-17 18：06：55，558 method:方法发生的位置，代码行数回车换行，输出代码指定的消息，回车换行
log4j.appender.stdout.layout.ConversionPattern=[%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n
#输出路径D为每天输出一个日志文件
log4j.appender.D=org.apache.log4j.DailyRollingFileAppender
#输出端D文件的路径为C:/log
log4j.appender.D.File=C://logs/log.log
#输出端D的可选参数Append配置是否在原文件内容的基础上追加日志，如果为false，Logger 初始化时会先清掉文件内容，也就是说每次重启程序，原来的日志会丢失。
log4j.appender.D.Append=true
#输出端D DEBUG以上输出
log4j.appender.D.Threshold=DEBUG
#输出端D的输出布局为灵活布局
log4j.appender.D.layout=org.apache.log4j.PatternLayout
#输出端D输出格式
log4j.appender.D.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n
#输出端E为每天输出一个日志空间
log4j.appender.E=org.apache.log4j.DailyRollingFileAppender
#输出端E的文件夹为E://logs/error.log
log4j.appender.E.File=C://logs/error.log
#输出端E的可选参数Append配置是否在原文件内容的基础上追加日志，如果为false，Logger 初始化时会先清掉文件内容，也就是说每次重启程序，原来的日志会丢失。
log4j.appender.E.Append=true
#输出端E ERROR以上输出
log4j.appender.E.Threshold=ERROR
#输出端E的布局是灵活布局
log4j.appender.E.layout=org.apache.log4j.PatternLayout
#输出端E的输出端格式
log4j.appender.E.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss}  [ %t:%r ] - [ %p ]  %m%n
